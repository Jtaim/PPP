/*
    Written by Jtaim
    Date 11 Oct 2019
    Stroustrup, Bjarne. Programming: Principles and Practice Using C++. Pearson Education. Kindle Edition.

    Section 11 Exercise 9
    Split the binary I/O program from section 11.3.2 into two:
    one program that converts an ordinary text file into binary and one program that reads binary and converts it to text.
    Test these programs by comparing a text file with what you get by converting it to binary and back.
*/

#include "ppp.hpp"
#include <cstddef>
#include <print>

constexpr std::string_view ascii_file{ "sect11_ex9.cpp" };
constexpr std::string_view binary_file{ "sect11_ex9_bin" };

int main()
try
{
    std::ifstream ifs{ ascii_file.data(), std::ios_base::binary };
    if( !ifs )
    {
        ppp::error( std::format( "could not open {}", ascii_file ) );
    }
    std::ofstream ofs{ binary_file.data(), std::ios_base::binary };
    if( !ofs )
    {
        ppp::error( std::format( "could not open {}", binary_file ) );
    }

    for( char c{}; ifs.get(c); )
    {
        ofs << c;
    }

    ifs.close();
    ofs.close();

    ifs = std::ifstream{ binary_file.data(), std::ios_base::binary };
    if( !ifs )
    {
        ppp::error( std::format( "could not open {}", binary_file ) );
    }

    for( char c{}; ifs.read( &c, sizeof( char ) ); )
    {
        //std::string s{ c };
        //auto i = static_cast<char>(std::stoi( c ) );
        std::print( "{}", c );
    }

    ppp::keep_window_open();
    return 0;
}
catch( std::exception &e )
{
    std::cerr << "exception: " << e.what() << std::endl;
    ppp::keep_window_open();
    return 1;
}
catch( ... )
{
    std::cerr << "exception\n";
    ppp::keep_window_open();
    return 2;
}
